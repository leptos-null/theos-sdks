name: Create SDKs

on: push

permissions:
  contents: write

jobs:
  create:
    runs-on: macos-latest

    steps:
      - name: Clone tools
        uses: actions/checkout@v4
        with:
          sparse-checkout: "tools/"

      - name: Install blacktop/ipsw
        run: brew install blacktop/tap/ipsw

      - name: Install aria2
        run: brew install aria2

      - name: Patch SDK
        env:
          DEVELOPER_DIR: /Applications/Xcode_14.1.app
          GH_TOKEN: ${{ github.token }}
        run: |
          # iOS config
          XC_SDK_NAME="iphoneos"
          SDK_PREFIX="iPhoneOS"
          IPSW_DEVICE="iPhone14,6" # random device that support iOS 15+
          DSC_BASENAME="dyld_shared_cache_arm64e"

          # tvOS config
          # XC_SDK_NAME="appletvos"
          # SDK_PREFIX="AppleTVOS"
          # IPSW_DEVICE="AppleTV5,3"
          # DSC_BASENAME="dyld_shared_cache_arm64"

          cd tools/
          PLATFORM_PATH="$(xcrun --sdk "${XC_SDK_NAME}" --show-sdk-platform-path)"
          BASE_SDK_PATH="$(xcrun --sdk "${XC_SDK_NAME}" --show-sdk-path)"

          SDK_VERSION="$(plutil -extract "Version" raw -o - "${BASE_SDK_PATH}/SDKSettings.plist")"
          SDK_OUTPUT_PATH="${SDK_PREFIX}${SDK_VERSION}.sdk"

          SYMBOLS_DIR="$(mktemp -d -t symbols)"
          IPSW_DOWNLOAD_DIR="$(mktemp -d -t ipsw)"
          IPSW_EXTRACTION_DIR="$(mktemp -d -t ipsw)"
          TBD_TOOL_PATH="$(mktemp -t tbd)"

          curl -L "https://github.com/inoahdev/tbd/releases/download/2.2/tbd-mac" -o "${TBD_TOOL_PATH}"
          chmod 0755 "${TBD_TOOL_PATH}"

          # `--dyld` is a convenient parameter for us, however it only supports iOS 16+
          IPSW_DOWNLOAD_URL="$(ipsw download ipsw --urls --version "${SDK_VERSION}" --device "${IPSW_DEVICE}")"

          aria2c --dir "${IPSW_DOWNLOAD_DIR}" "${IPSW_DOWNLOAD_URL}"
          unzip -d "${IPSW_EXTRACTION_DIR}" "${IPSW_DOWNLOAD_DIR}"/*.ipsw "*.dmg"

          for DMG_FILE in "${IPSW_EXTRACTION_DIR}"/*.dmg; do
            DMG_MOUNT_ROOT="$(mktemp -d -t dmg)"
            hdiutil attach "${DMG_FILE}" -mountroot "${DMG_MOUNT_ROOT}"
            for MOUNT_VOL in "${DMG_MOUNT_ROOT}"/*; do
              DYLD_CACHE_PATH="${MOUNT_VOL}/System/Library/Caches/com.apple.dyld/${DSC_BASENAME}"
              ls -alh "${DYLD_CACHE_PATH}" || true # debug
              if [[ -e "${DYLD_CACHE_PATH}" ]]; then
                break 2 # break out of DMG_FILE loop
              fi
              # here becuase we didn't find the dyld shared cache (didn't break)
              unset DYLD_CACHE_PATH
              hdiutil detach "${MOUNT_VOL}" || true # this fails occasionally - just ignore
            done
          done

          echo "DYLD_CACHE_PATH = ${DYLD_CACHE_PATH}" # debug

          if [[ -z "${DYLD_CACHE_PATH}" ]]; then
            echo "Failed to find ${DSC_BASENAME} in ${IPSW_DOWNLOAD_URL}"
            exit 1
          fi

          make dsc_extractor_client
          ./dsc_extractor_client "${PLATFORM_PATH}/usr/lib/dsc_extractor.bundle" "${DYLD_CACHE_PATH}" "${SYMBOLS_DIR}"
          ./create_patched_sdk.sh "${SYMBOLS_DIR}" "${SDK_OUTPUT_PATH}" "${BASE_SDK_PATH}" "${TBD_TOOL_PATH}"

          tar -cJf "${SDK_OUTPUT_PATH}.tar.xz" "${SDK_OUTPUT_PATH}"

          RELEASE_TAG="auto-${GITHUB_SHA:0:7}"
          gh release create "${RELEASE_TAG}" --draft --title "Draft Release"
          gh release upload "${RELEASE_TAG}" "${SDK_OUTPUT_PATH}.tar.xz"
